name: Deploy Infraestrutura VPC

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/deploy.yml'

env:
  AWS_REGION: us-east-1
  BUCKET_NAME: fiap-hack-terraform-state
  PROJECT_NAME: fiap-hack
  ENVIRONMENT: production

jobs:
  validar:
    name: Validar Terraform
    runs-on: ubuntu-latest
    
    steps:
      - name: Baixar c√≥digo
        uses: actions/checkout@v4

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configurar backend S3
        run: |
          aws s3 mb s3://${{ env.BUCKET_NAME }} --region ${{ env.AWS_REGION }} || true
          aws s3api put-bucket-versioning --bucket ${{ env.BUCKET_NAME }} --versioning-configuration Status=Enabled

      - name: Inicializar Terraform (reconfigure)
        working-directory: terraform
        run: terraform init -reconfigure

      - name: Corrigir formata√ß√£o
        working-directory: terraform
        run: terraform fmt -recursive

      - name: Validar Terraform
        working-directory: terraform
        run: terraform validate

  plano:
    name: Gerar Plano de Mudan√ßas
    runs-on: ubuntu-latest
    needs: validar
    
    steps:
      - name: Baixar c√≥digo
        uses: actions/checkout@v4

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Inicializar Terraform (reconfigure)
        working-directory: terraform
        run: terraform init -reconfigure

      - name: Gerar plano
        working-directory: terraform
        run: terraform plan -out=vpc.tfplan

      - name: Salvar plano
        uses: actions/upload-artifact@v4
        with:
          name: vpc-tfplan
          path: terraform/vpc.tfplan
          retention-days: 1

  deploy:
    name: Aplicar Mudan√ßas na Infraestrutura
    runs-on: ubuntu-latest
    needs: [validar, plano]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Baixar c√≥digo
        uses: actions/checkout@v4

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Baixar plano
        uses: actions/download-artifact@v4
        with:
          name: vpc-tfplan
          path: terraform/

      - name: Inicializar Terraform (reconfigure)
        working-directory: terraform
        run: terraform init -reconfigure

      - name: Aplicar mudan√ßas
        working-directory: terraform
        run: terraform apply -auto-approve vpc.tfplan

      - name: Verificar recursos criados
        run: |
          echo "=== Recursos VPC Criados ==="
          echo "VPC ID: $(cd terraform && terraform output -raw vpc_id)"
          echo ""
          echo "Subnets P√∫blicas:"
          cd terraform && terraform output -raw public_subnet_ids
          echo ""
          echo "Subnets Privadas:"
          cd terraform && terraform output -raw private_subnet_ids
          echo ""
          echo "Security Groups:"
          echo "Cluster SG: $(cd terraform && terraform output -raw cluster_security_group_id)"
          echo "Nodes SG: $(cd terraform && terraform output -raw node_security_group_id)"

      - name: Testar conectividade
        run: |
          echo "=== Testando Conectividade ==="
          VPC_ID=$(cd terraform && terraform output -raw vpc_id)
          echo "VPC criada com sucesso: $VPC_ID"
          
          # Verificar se a VPC est√° dispon√≠vel
          aws ec2 describe-vpcs --vpc-ids $VPC_ID --query 'Vpcs[0].State' --output text

  notificar:
    name: Notificar Status do Deploy
    runs-on: ubuntu-latest
    needs: deploy
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Notificar sucesso
        if: needs.deploy.result == 'success'
        run: |
          echo "‚úÖ Deploy da VPC conclu√≠do com sucesso!"
          echo "üåê VPC ID: $(cd terraform && terraform output -raw vpc_id)"
          echo "üîó Subnets p√∫blicas: $(cd terraform && terraform output -raw public_subnet_ids | tr '\n' ' ')"
          echo "üîí Subnets privadas: $(cd terraform && terraform output -raw private_subnet_ids | tr '\n' ' ')"

      - name: Notificar falha
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Falha no deploy da VPC!"
          exit 1 